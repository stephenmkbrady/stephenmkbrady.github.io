{"meta":{"title":"cosmic-engineer","subtitle":null,"description":null,"author":"Stephen Brady","url":"http://blog.cosmic-engineer.com"},"pages":[],"posts":[{"title":"pyHyperlapse","slug":"pyHyperlapse","date":"2016-10-23T19:37:00.000Z","updated":"2016-10-23T19:38:41.447Z","comments":true,"path":"2016/10/23/pyHyperlapse/","link":"","permalink":"http://blog.cosmic-engineer.com/2016/10/23/pyHyperlapse/","excerpt":"","text":"Hyperlapse GeneratorpyHyperlapse Bitbucket RepositoryThis python tool generates a hyperlapse video using Google Street View Image API and a kml file.Compatible with both Windows and Linux. Hyperlapse (also walklapse, spacelapse, stop-motion time-lapse,motion timelapse, moving timelapse) is an exposure technique intime-lapse photography, in which the position of the camera is beingchanged between each exposure in order to create a tracking shotin timelapse sequences. In contrast to a simple motion timelapse– dolly shots, which are realized with short camera sliders;in hyperlapse photography, the camera is being moved through very long distances. Wikipedia window.hexoLmaps = window.hexoLmaps || { maps: {}}; window.hexoLmaps.maps['initleaflet5085'] = function init() { var mymap = L.map('leaflet5085'); mymap.setView([51.307778 , 11.049167], 13); var osmURL = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'; L.tileLayer(osmURL, { attribution: 'Map data © &lt;a href=&quot;http://openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt; contributors.', maxZoom: 18 }).addTo(mymap); var geoJSON = '/2016/10/23/pyHyperlapse/Directions.geojson' if (geoJSON) { doLoadFile(geoJSON, function(data) { var layer = L.geoJson(JSON.parse(data)); layer.addTo(mymap); mymap.fitBounds(layer.getBounds()); }); } } function doLoadFile(url, callback) { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (xhttp.readyState == 4 && xhttp.status == 200) { callback(xhttp.responseText); } }; xhttp.open(\"GET\", url, true); xhttp.send(); } function makeMaps() { for (var map in window.hexoLmaps.maps) { console.log('map #', map); window.hexoLmaps.maps[map](); } } function doLoadScript(url, callback) { var script = document.createElement('script'); script.type = 'text/javascript'; script.src = url; script.onreadystatechange = script.onload = function() { if (!callback.done && (!script.readyState || /loaded|complete/.test(script.readyState))) { callback.done = true; callback(); } }; document.querySelector('head').appendChild(script); } function loadScript() { window.hexoLmaps.mapScripLoaded = true; var css = document.createElement('link'); css.rel = 'stylesheet'; css.href = 'http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css'; document.querySelector('head').appendChild(css); doLoadScript('http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js', makeMaps) } if (!window.hexoLmaps.mapScripLoaded) { loadScript(); } toGeoJSON = (function() { 'use strict'; var removeSpace = (/\\s*/g), trimSpace = (/^\\s*|\\s*$/g), splitSpace = (/\\s+/); // generate a short, numeric hash of a string function okhash(x) { if (!x || !x.length) return 0; for (var i = 0, h = 0; i < x.length; i++) { h = ((h","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://blog.cosmic-engineer.com/tags/python/"},{"name":"hyperlapse","slug":"hyperlapse","permalink":"http://blog.cosmic-engineer.com/tags/hyperlapse/"},{"name":"python27","slug":"python27","permalink":"http://blog.cosmic-engineer.com/tags/python27/"},{"name":"google street view image api","slug":"google-street-view-image-api","permalink":"http://blog.cosmic-engineer.com/tags/google-street-view-image-api/"},{"name":"cli","slug":"cli","permalink":"http://blog.cosmic-engineer.com/tags/cli/"}],"keywords":[]},{"title":"First, but really second production site","slug":"First-production-site","date":"2016-10-23T15:50:13.000Z","updated":"2016-10-23T17:37:38.081Z","comments":true,"path":"2016/10/23/First-production-site/","link":"","permalink":"http://blog.cosmic-engineer.com/2016/10/23/First-production-site/","excerpt":"","text":"The final product www.talentsbeyondrefugees.com Attractive responsive landing page with the ability to send CV’s directly from the page. First stage of the siteI had this initially hosted on google app engine, which is overkill for this kind of site both for what it provides and for how much it costs. In 2 weeks of my month free trial the site cost almost 13 euros. I had to use recaptcha on the form as it took a bot less than 4 hours to find my site and to start sending emails, using up the email limit within minutes. Google App EngineCBT Nuggets’ Garth Schulte says Google engineers are predicting the price of cloud services to drop at the rate of Moore’s law. They’re not in my price range yet. Cloud Wars: Amazon (AWS) vs. Google (GCP) vs. Microsoft (Azure) GAE is very interesting and easy to use, but not so easy to control. Scaling is on by default and you can’t turn it off. It doesn’t use the cheapest Google compute has to offer. You can’t force it to do so. If I have this wrong, please correct me in the comments, I tried configuring using compute and gcloud to no avail. If I use google cloud again, it will probably be the compute engine and not the app engine unless I somehow get involved in a pokemon go clone. There are a lot better/cheaper options for running node.js for a spendthrift not expecting a lot of traffic. The site used and still uses AWS SES, amazon’s simple email service which let’s me send 200 emails per 24 hour period at 1 email/second for free. Styling is done in Materializecss and uses the beautiful Dropify. Migrating from Google App Engine to Github pages and HerokuServerless setup: AWS LambdaI initially wanted to go serverless, move to github and use AWS Lambda for sending emails, but I need to email attachments so I kept my node.js Hapi server and moved it to Heroku. AWS Lambda Static page server: Setting up Github PagesThis process is really easy and well documented. Figure 1: In the github repo settings where I have the static site, I enable the github pages. talentsbeyondrefugees static site on Github Figure 2: Choose which branch will be on the site, I can even just serve a /docs folder in the repo. Figure 3: Tell github which domain I’ll be using, I could use blog.talentsbeyondrefugees.com or just talentsbeyondrefugees.com which is the apex domain. I added both www and the apex. Figure 4: github keeps checking my domain and finds I domain name config isn’t correct. That’s because I’ve still got the settings for pointing domain to google app engine. Figure 5: Just noticed that github keeps a text file with the domain name in the repository. Figure 6: This is namecheaps cpanel for configuring my domain. Everything highlighted in yellow is added for google app engine site.The aaaa and a records are for google’s magic routers I think and the cname is what is pointing the website to that domain, need to delete all this.The txt record with “google-site-verification…” value is so google will let me access their hostmaster panel, it’s proof that I own the domain for adding analytics, etc.At the bottom I’ve already added the github cname, that’s the only record github wants in my domain. Figure 7: The only records I have now are for aws’ simple email service, to verify that I own the domain and I can send emails using ses with that domain. I don’t need to do this for ses as I’m using the ses api but I would have to for smtp. I still do it as it will let me use the api to send from “example@talentsbeyondrefugees.com” otherwise I would have to verify an email address like “myemail@gmail.com” in the ses control panel and I then I can send from that. I have to wait a day or 2 for the new settings to propagate through the web. The symptoms of which are; if I try to access www.talentsbeyondrefugees.com from my laptop then it might work fine using heroku server and github pages, but if I try from my PC, it might work fine but still be using the google site. Server side setup Node.js running on Heroku, documentation is great and easy to follow, and heroku cli makes it easy. Server is simple, it’s just listening for a POST request and then email what’s posted:The static site uses a form which posts to my server: Figure 8: The server script is quite simple, uses hapi.js on node.js listens for a post on port 80 to /upload and then reads in the form details if the captcha is filled out and correct and then emails if they are and responds, or responds with an error if they aren’t ok. I display the response message on the static page. CORS has to be enabled on the server.It took me an afternoon to get comfortable with hapi, real easy to use. Hapi.js The heroku server does sleep after an hour of inactivity, so sending CV’s takes a little longer, but with added feedback and preloader on the form it isn’t concerning.","categories":[],"tags":[{"name":"tech","slug":"tech","permalink":"http://blog.cosmic-engineer.com/tags/tech/"},{"name":"node.js","slug":"node-js","permalink":"http://blog.cosmic-engineer.com/tags/node-js/"},{"name":"web","slug":"web","permalink":"http://blog.cosmic-engineer.com/tags/web/"},{"name":"static","slug":"static","permalink":"http://blog.cosmic-engineer.com/tags/static/"},{"name":"hapi.js","slug":"hapi-js","permalink":"http://blog.cosmic-engineer.com/tags/hapi-js/"},{"name":"heroku","slug":"heroku","permalink":"http://blog.cosmic-engineer.com/tags/heroku/"},{"name":"aws","slug":"aws","permalink":"http://blog.cosmic-engineer.com/tags/aws/"},{"name":"aws ses","slug":"aws-ses","permalink":"http://blog.cosmic-engineer.com/tags/aws-ses/"},{"name":"responsive","slug":"responsive","permalink":"http://blog.cosmic-engineer.com/tags/responsive/"},{"name":"material","slug":"material","permalink":"http://blog.cosmic-engineer.com/tags/material/"},{"name":"javascript","slug":"javascript","permalink":"http://blog.cosmic-engineer.com/tags/javascript/"},{"name":"html5","slug":"html5","permalink":"http://blog.cosmic-engineer.com/tags/html5/"},{"name":"css3","slug":"css3","permalink":"http://blog.cosmic-engineer.com/tags/css3/"}],"keywords":[]}]}